// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

contract TransactionContract {
    address public ownerOnly;
    mapping(address => uint256) public balanceofAccount;

    //Events
    event TokensSent(address indexed from, address indexed to, uint256 amount);
    event AmountDeposited(address indexed from, uint256 amount);
    event AmountWithdrawn(address indexed to, uint256 amount);
    event EmergencyWithdrawal(address indexed to, uint256 amount);
 
    //Initialization
    constructor() {
        ownerOnly = msg.sender;
    }

    //Token Transfer
    function sendingtheTokens(address _TO, uint256 _AMOUNT) public {
        require(balanceofAccount[msg.sender] >= _AMOUNT, "Insufficient balance.");
        assert(balanceofAccount[_TO] + _AMOUNT >= balanceofAccount[_TO]);
        balanceofAccount[msg.sender] -= _AMOUNT;
        balanceofAccount[_TO] += _AMOUNT;
        emit TokensSent(msg.sender, _TO, _AMOUNT);
    }

    //Depositting
    function depositingtheAmount() public payable {
        balanceofAccount[msg.sender] += msg.value;
        emit AmountDeposited(msg.sender, msg.value);
    }

    //Withdrawing
    function withdrawingofAmount(uint256 _AMOUNT) public {
        require(balanceofAccount[msg.sender] >= _AMOUNT, "Insufficient balance to withdraw.");

        (bool sent, ) = msg.sender.call{value: _AMOUNT}("");
        require(sent, "Failed to send Ether");

        balanceofAccount[msg.sender] -= _AMOUNT;
        emit AmountWithdrawn(msg.sender, _AMOUNT);
    }

    //Emergency Withdrawal
    function emergencyWithdrawingtheAmount() public {
        if (msg.sender != ownerOnly) {
            revert("Only the owner can perform emergency withdrawal.");
        }

        uint256 contractBalance = address(this).balance;
        (bool sent, ) = ownerOnly.call{value: contractBalance}("");
        require(sent, "Failed to send Ether");

        balanceofAccount[ownerOnly] = 0;
        emit EmergencyWithdrawal(ownerOnly, contractBalance);
    }

    receive() external payable {
        depositingtheAmount();
    }

    fallback() external payable {}
}
